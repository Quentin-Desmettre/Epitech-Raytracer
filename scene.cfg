# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = true;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
clusters = (
);

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = false;

# Display the rendered scene each time a pixel is computed.
# Defaults to false.
continuous-render = false;

# Path to the output file
# Defaults to "output.png".
# Supported formats: bmp, png, tga and jpg.
output = "renders/render.ppm";

# When set to true, the scene rendering will restart when the configuration file is modified.
# Defaults to false.
hot-reload = false;


#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 30;
rays-per-pixel = 5;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = {x = 800; y = 800;};

    # Center of the camera
    position = { x = 1; y = -0.5; z = 0.5; };

    # The point the camera is looking at
    rotation = { x = 0; y = 0; z = 0; };

    # Width of the image plane
    fieldOfView = 90;

# Optional parameters

    # Anti-aliasing level (1 = no anti-aliasing)
    antiAliasing = 1;
};

# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color              (defaults to white)
#  - transparency       (defaults to false)
#  - refection          (defaults to false)
#  - roughness          (defaults to 0)
#  - refractive-index   (defaults to 1)
#  - transformations    (defaults to no transformation)
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - .obj

objects = (
    {
        type = "sphere";
        position = { x = -1; y = -0.5; z = 4; }; color = { r = 200; g = 64; b = 64; }; radius = 1; roughness = 0.1; reflection = false;
    },
    // {
    //     type = "cone";
    //     position = { x = 1; y = -0.5; z = 4; }; color = { r = 64; g = 200; b = 64; }; radius = 1;
    //     height = 3;
    //     roughness = 0; transparency = true; refractive-index = 1.5;
    // },
    // {
    //     type = "plane";
    //     position = -0.5; color = { r = 100; g = 100; b = 100; }; axis = "-y"; reflection = true; roughness = 0.5;
    // },
    {
        type = "square";
        color = { r = 40; g = 40; b = 200; };
        position = { x = 2; y = 0; z = 4; };
        p2 = { x = 2; y = -1; z = 4; };
        p3 = { x = 3; y = -1; z = 4; };
        p4 = { x = 3; y = 0; z = 4; };
    },
    {
        type = "sphere";
        position = { x = 1; y = 0; z = 4; }; color = { r = 200; g = 64; b = 200; }; radius = 0.5; roughness = 0; reflection = false; emission-color = { r = 255; g = 255; b = 255; }; emission-intensity = 20;
    },
    {
        type = "plane";
        position = -0.5; color = { r = 200; g = 200; b = 64; }; axis = "-y"; reflection = true; roughness = 0.2;
    },
);

# Lights
# Every light support:
#  - type               (mandatory)
#  - intensity          (defaults to 1)
#  - color              (defaults to white)
#  - position           (only for point, defaults to {x = 0; y = 0; z = 0;})
#  - direction          (only for directional, defaults to {x = 0; y = 0; z = 0;})
#
# Supported types:
#  - point
#  - directional
#  - background         (color used when the camera doesn't hit anything, if multiple, multiplied together)
#  - ambient            (color used like a filter on the whole scene, if multiple, multiplied together)

lights = (
    // {
    //     type = "directional";
    //     color = { r = 255; g = 255; b = 255; }; intensity = 1;
    //     direction = { x = 0; y = 10; z = 0; };
    // },
    // {
    //     type = "directional";
    //     color = { r = 255; g = 255; b = 255; }; intensity = 1;
    // },
    {
        type = "background";
        color = { r = 213; g = 213; b = 255};
    },
    {
        type = "ambient";
        color = { r = 255; g = 255; b = 255};
    },
);