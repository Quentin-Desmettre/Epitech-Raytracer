# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = true;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
clusters = (
);

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = false;

# Display the rendered scene each time a pixel is computed.
# Defaults to false.
continuous-render = false;

# Path to the output file
# Defaults to "output.png".
# Supported formats: bmp, png, tga and jpg.
output = "renders/render.png";

# When set to true, the scene rendering will restart when the configuration file is modified.
# Defaults to false.
hot-reload = false;


#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 3;
rays-per-pixel = 5;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = {x = 800; y = 800;};
    antiAliasing = 2;

    # Center of the camera
    position = { x = -1; y = -2.5; z = 0; };
    // position = { x = 1; y = -2; z = 2;};

    # The point the camera is looking at
    focusedPoint = { x = -0.4; y = 0; z = 0; };
    // focusedPoint = { x = -0.4; y = -0.75; z = 0;};

    # Width of the image plane
    fieldOfView = 90;
};

# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color              (defaults to white)
#  - transparency       (defaults to 1)
#  - roughness          (defaults to 0)
#  - refection          (defaults to false)
#  - transformations    (defaults to no transformation)
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - .obj
# objects = (
#     {
#         type = "sphere";
#         position = { x = -120; y = 0; z = 0 }; color = { r = 255; g = 64; b = 64 }; radius = 100; emission-color = { r = 255; g = 255; b = 255 }; emission-intensity = 3;
#     },
#     {
#         type = "sphere";
#         position = { x = -4.95; y = 0; z = 0 }; color = { r = 140; g = 92; b = 42 }; radius = 0.2;
#     },
#     {
#         type = "sphere";
#         position = { x = -0.95; y = 0; z = 0 }; color = { r = 201; g = 115; b = 30 }; radius = 1;
#     },
#     {
#         type = "sphere";
#         position = { x = 2.25; y = 0; z = 0 }; color = { r = 83; g = 206; b = 203 }; radius = 0.5;
#     },
#     {
#         type = "sphere";
#         position = { x = 8.45; y = 0; z = 0 }; color = { r = 197; g = 55; b = 3 }; radius = 0.25;
#     },
#     {
#         type = "sphere";
#         position = { x = 10.55; y = 0; z = 0 }; color = { r = 232; g = 166; b = 88 }; radius = 5;
#     },
#     {
#         type = "sphere";
#         position = { x = 25.55; y = 0; z = 0 }; color = { r = 240; g = 196; b = 126 }; radius = 4.7;
#     },
#     {
#         type = "sphere";
#         position = { x = 36.55; y = 0; z = 0 }; color = { r = 144; g = 219; b = 221 }; radius = 2.05;
#     },
#     {
#         type = "sphere";
#         position = { x = 45.55; y = 0; z = 0 }; color = { r = 100; g = 182; b = 233 }; radius = 1.95;
#     }
# );

objects = (
    {
        type = "sphere";
        position = { x = -1; y = -0.5; z = 4; }; color = { r = 200; g = 200; b = 200; }; radius = 1; roughness = 0.5; transparency = false;
    },
    {
        type = "sphere";
        position = { x = 0; y = -2; z = 4; }; color = { r = 64; g = 64; b = 255; }; radius = 0.3;
    },
    // {
    //     type = "sphere";
    //     position = { x = 1; y = 0; z = 4; }; color = { r = 255; g = 255; b = 255; }; radius = 0.5; emission-color = { r = 255; g = 255; b = 255; }; emission-intensity = 20;
    // },
    {
        type = "sphere";
        position = { x = -1; y = 0; z = 6; }; color = { r = 255; g = 64; b = 64; }; radius = 0.5; roughness = 0; reflection = true;
    },
    {
        type = "plane";
        position = -0.5; color = { r = 200; g = 200; b = 200; }; axis = "-y"; reflection = true; roughness = 0.1;
    },
    // {
    //     type = "plane";
    //     position = -5; color = { r = 255; g = 255; b = 255; }; axis = "-z"; reflection = true; roughness = 0;
    // },
    // {
    //     type = "plane";
    //     position = 3; color = { r = 255; g = 255; b = 255; }; axis = "z"; reflection = true; roughness = 0;
    // },
    // {
    //     type = "plane";
    //     position = 3; color = { r = 255; g = 255; b = 255; }; axis = "-x"; reflection = true; roughness = 0;
    // },
    // {
    //     type = "plane";
    //     position = 3; color = { r = 255; g = 255; b = 255; }; axis = "x"; reflection = true; roughness = 0;
    // },
    // {
    //     type = "plane";
    //     position = 0.5; color = { r = 100; g = 100; b = 100; }; axis = "x"; transparency = true; roughness = 0.1;
    // }
    // {
    //     type = "plane";
    //     position = 2; color = { r = 100; g = 100; b = 100; }; axis = "z"; transparency = true;
    // }
);
