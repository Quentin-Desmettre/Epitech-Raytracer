# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = true;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
clusters = (
);

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = false;

# Path to the output file
# Defaults to "output.ppm".
# Supported formats: ppm.
output = "renders/solar_system.ppm";

#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 3;
rays-per-pixel = 5;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = {x = 800; y = 800};

    # Center of the camera
    position = { x = 13; y = -15; z = -80 };

    # The point the camera is looking at
    rotation = { x = 0; y = 0; z = 0 };

    // filters = ({ r = 240; g = 220; b = 30 });
    # Width of the image plane
    fieldOfView = 90;
}

# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color              (defaults to white)
#  - transparency       (defaults to 1)
#  - refection          (defaults to false)
#  - transformations    (defaults to no transformation)
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - .obj
#  - quad
objects = (
    {
        type = "sphere";
        position = { x = -120; y = 0; z = 0 }; color = { r = 0; g = 0; b = 0 }; radius = 100; emission-color = { r = 255; g = 255; b = 255 }; emission-intensity = 3;
    },
    {
        type = "sphere";
        position = { x = -4.95; y = 0; z = 0 }; color = { r = 140; g = 92; b = 42 }; radius = 0.2;
    },
    {
        type = "sphere";
        position = { x = -0.95; y = 0; z = 0 }; color = { r = 201; g = 115; b = 30 }; radius = 1;
    },
    {
        type = "sphere";
        position = { x = 2.25; y = 0; z = 0 }; color = { r = 83; g = 206; b = 203 }; radius = 0.5;
    },
    {
        type = "sphere";
        position = { x = 8.45; y = 0; z = 0 }; color = { r = 197; g = 55; b = 3 }; radius = 0.25;
    },
    {
        type = "sphere";
        position = { x = 10.55; y = 0; z = 0 }; color = { r = 232; g = 166; b = 88 }; radius = 5;
    },
    {
        type = "sphere";
        position = { x = 25.55; y = 0; z = 0 }; color = { r = 240; g = 196; b = 126 }; radius = 4.7;
    },
    {
        type = "sphere";
        position = { x = 36.55; y = 0; z = 0 }; color = { r = 144; g = 219; b = 221 }; radius = 2.05;
    },
    {
        type = "sphere";
        position = { x = 45.55; y = 0; z = 0 }; color = { r = 100; g = 182; b = 233 }; radius = 1.95;
    }
);

lights = (
    {
        type = "background";
        color = { r = 80; g = 80; b = 80};
    },
    {
        type = "ambient";
        color = { r = 20; g = 20; b = 20};
    },
);
