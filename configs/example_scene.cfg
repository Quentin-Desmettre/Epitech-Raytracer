# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = false;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
# cluster = (
#     "127.0.0.1:1234",
#     "127.0.0.1:1235"
# );

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = false;

# Path to the output file
# Defaults to "output.png".
# Supported formats: bmp, png, ppm, tga and jpg.
output = "output.png";

#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 5;
rays-per-pixel = 1;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = {x = 800; y = 800};

    # Antialiasing level. Must be a power of 2, and in the interval [1, 16].
    # Defaults to 1 (no antialiasing).
    antiAliasing = 1;

    # Center of the camera
    position = { x = 0; y = 0; z = 0 };

    # rotation of the camera
    rotation = { x = 0; y = 0; z = 0 };

    # Width of the image plane
    fieldOfView = 90;
}


# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color
#  - transparency
#  - reflection
#  - roughness
#  - emission-color
#  - emission-intensity
#  - refractive-index
#  - transformations
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - obj
objects = (
    {
        type = "sphere";

        # Center of the sphere
        position = { x = 0; y = 0; z = 0 };

        # Color of the object
        color = { r = 255; g = 0; b = 0 };

        # Transparency of the object, must be between 0 and 1.
        # Defaults to 1 (no transparency)
        transparency = 0.5;

        # Enable / disable refection
        refection = false;

        # Roughness of the object. Must be in the interval [0, 1]
        # Defaults to 1
        roughness = 1;

        # Intensity of the light emitted by the object. Must be >= 0
        # Defaults to 0
        emission-intensity = 0;

        # Color of the light emitted by the object (usefull only if emission intensity if > 0)
        emission-color = { r = 0; g = 0; b = 0}

        # Transformations to apply to the object.
        # The transformations are applied in the order they are specified.
        # If the same transformation is specified multiple times, all of them will be applied.
        # Defaults to no transformation.
        transformations = (
            # Scale factors. A factor of 2 will double the size of the object.
            { type = "scale"; x=1; y=1; z=1; },

            # Rotation around the origin or the center of the object.
            { type = "rotate"; around = "origin"; axis="x"; angle="45" },
            { type = "rotate"; around = "center", axis="y"; angle="-30" },

            # Translation
            { type = "translate"; x = 0; y = 0; z = 0 },

            # Matrix transformation, must be 4x4.
            { type = "matrix"; matrix = (
                    ( 1, 0, 0, 0 ),
                    ( 0, 1, 0, 0 ),
                    ( 0, 0, 1, 0 ),
                    ( 0, 0, 0, 1 )
                )
            }
        )
    },
    {
        type = "plane";
        color = { r = 0; g = 255; b = 0 };

        # Positon of the plane
        # If the plane is aligned on the X or Y axis, the position is the position on the Z axis.
        position = -20;
        axis = "x";
    },
    {
        type = "cylinder";

        # Position of the center of the cylinder
        position = { x = 0; y = 0; z = 0 };

        # Radius of the cylinder
        radius = 10;

        # Optional
        # If specified, limit the height of the cylinder (from bottom to top).
        height = 20;
    },
    {
        type = "cone";

        # Position of the vertex of the cone
        position = { x = 0; y = 0; z = 0 };

        # Height of the cone (must be > 0 if specified)
        height = 1;
    },
    {
        type = "triangle";
        p1 = { x = 0; y = 0; z = 0 };
        p2 = { x = 0; y = 0; z = 0 };
        p3 = { x = 0; y = 0; z = 0 };
    },
    {
        type = "tanglecube";
        # No parameters
    },
    {
        type = "torus";

        # Distance between the center of the torus and the center of the tube
        # Must be > 0
        radius = 1;

        # Radius of the tube, must be > 0
        thickness = 0.5
    },
    {
        type = "obj";
        position = { x = 0; y = 0; z = 0 };
        path = "path/to/obj/file.obj";
    }
);

# Lights
# Every light support:
#  - type               (mandatory)
#  - intensity          (defaults to 1)
#  - color              (defaults to white)
#  - position           (only for point, defaults to {x = 0; y = 0; z = 0;})
#  - direction          (only for directional, defaults to {x = 0; y = 0; z = 0;})
#
# Supported types:
#  - point
#  - directional
#  - background         (color used when the camera doesn't hit anything, if multiple, multiplied together)
#  - ambient            (color used like a filter on the whole scene, if multiple, multiplied together)
lights = (
)
