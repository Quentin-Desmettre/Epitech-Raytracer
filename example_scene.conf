# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = false;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
# cluster = (
#     "127.0.0.1:1234",
#     "127.0.0.1:1235"
# );

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = false;

# Display the rendered scene each time a pixel is computed.
# Defaults to false.
continuous-render = false;

# Path to the output file
# Defaults to "output.png".
# Supported formats: bmp, png, tga and jpg.
output = "output.png";

# When set to true, the scene rendering will restart when the configuration file is modified.
# Defaults to false.
hot-reload = false;


#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 5;
rays-per-pixel = 1;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = 1280x720;

    # Center of the camera
    position = { x = 0; y = 0; z = 0 };

    # The point the camera is looking at
    focusedPoint = { x = 0; y = 0; z = 0 };

    # Width of the image plane
    fieldOfView = 90;
}


# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color              (defaults to white)
#  - transparency       (defaults to 1)
#  - refection          (defaults to false)
#  - transformations    (defaults to no transformation)
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - .obj
objects = (
    {
        type = "sphere"; # Works the same with torus and tanglecube

        # Center of the sphere/torus/tanglecube
        position = { x = 0; y = 0; z = 0 };

        # Color of the object
        color = { r = 255; g = 0; b = 0 };

        # Transparency of the object, must be between 0 and 1.
        # Defaults to 1 (no transparency)
        transparency = 0.5;

        # Enable / disable refection
        refection = false;

        # Transformations to apply to the object.
        # The transformations are applied in the order they are specified.
        # If the same transformation is specified multiple times, all of them will be applied.
        # Defaults to no transformation.
        transformations = (
            # Scale factors. A factor of 2 will double the size of the object.
            { type = "scale"; factor=1 },

            # Rotation around the origin or the center of the object.
            { type = "rotate"; around = "origin"; axis="x"; angle="45" },
            { type = "rotate"; around = "center", axis="y"; angle="-30" },

            # Translation
            { type = "translate"; x = 0; y = 0; z = 0 },

            # Matrix transformation, must be 4x4.
            { type = "matrix"; matrix = (
                    ( 1, 0, 0, 0 ),
                    ( 0, 1, 0, 0 ),
                    ( 0, 0, 1, 0 ),
                    ( 0, 0, 0, 1 )
                )
            }
        )
    },
    {
        type = "plane";
        color = { r = 0; g = 255; b = 0 };

        # Positon of the plane
        # If the plane is aligned on the X or Y axis, the position is the position on the Z axis.
        position = -20;
        axis = "x";
    },
    {
        type = "cylinder";

        # Position of the center of the cylinder
        position = { x = 0; y = 0; z = 0 };

        # Radius of the cylinder
        radius = 10;

        # Optional
        # If specified, limit the height of the cylinder (from bottom to top).
        height = 20;
    },
    {
        type = "cone";

        # Position of the vertex of the cone
        position = { x = 0; y = 0; z = 0 };

        # Height of the bottom part of the cone
        # Defaults to -1 (no limit)
        bottomHeight = 10;

        # Height of the top part of the cone
        # Defaults to -1 (no limit)
        topHeight = 5;
    },
    {
        type = "triangle";
        p1 = { x = 0; y = 0; z = 0 };
        p2 = { x = 0; y = 0; z = 0 };
        p3 = { x = 0; y = 0; z = 0 };
    },
    {
        type = "obj";
        position = { x = 0; y = 0; z = 0 };
        path = "path/to/obj/file.obj";
    }
);

lights = (
    # TODO
)
