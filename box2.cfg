# This is a sample configuration file for the raytracer.
# Default values are applied when a parameter is not specified.
# If a parameter has no default value, it is required.
#
########################################################################
# ANY MISCONFIGURATION WILL CAUSE THE PROGRAM TO NOT RENDER YOUR SCENE #
########################################################################
#


#=======================================================================#
#                        General configuration                          #
#=======================================================================#

# Weather to use multithreading or not.
# When activated, uses all the cores of the CPU.
# Defaults to false.
multithreading = true;

# IP adresses of the machines to use for clustering
# Defaults to empty (aka no clustering).
clusters = (
);

# Renders the scene with much less precision (but fastly), before running the real render.
# Defaults to false.
pre-render = true;

# Display the rendered scene each time a pixel is computed.
# Defaults to false.
continuous-render = false;

# Path to the output file
# Defaults to "output.ppm".
# Supported formats: ppm.
output = "renders/render.ppm";

# When set to true, the scene rendering will restart when the configuration file is modified.
# Defaults to false.
hot-reload = false;


#=======================================================================#
#                        Scene configuration                            #
#=======================================================================#

# Precision of the rendering
number-of-bounces = 30;
rays-per-pixel = 5;

# Camera configuration
camera: {
# Required parameters

    # Size of the image to render
    resolution = {x = 800; y = 800;};
    antiAliasing = 1;

    # Center of the camera
    position = { x = 0; y = -2; z = -1; };

    # The point the camera is looking at
    rotation = { x = 0; y = 0; z = 0; };

    # Width of the image plane
    fieldOfView = 90;
};

# Objects
# Every objet support:
#  - type               (mandatory)
#  - position           (mandatory)
#  - color              (defaults to white)
#  - transparency       (defaults to false)
#  - refection          (defaults to false)
#  - roughness          (defaults to 0)
#  - transformations    (defaults to no transformation)
#  - radius             (only for sphere, defaults to 1)
#  - axis               (only for plane, defaults to "y")
#  - emission-color     (defaults to black)
#  - emission-intensity (defaults to 0)
#  - p1                 (only for triangle or square, defaults to { x = 0; y = 0; z = 0; })
#  - p2                 (only for triangle or square, defaults to { x = 1; y = 0; z = 0; })
#  - p3                 (only for triangle or square, defaults to { x = 0; y = 0; z = 1; })
#  - p4                 (only for square, defaults to { x = 1; y = 0; z = 1; })
#
# Supported types:
#  - sphere
#  - plane
#  - cylinder
#  - cone
#  - torus
#  - triangle
#  - tanglecube
#  - .obj
#  - square

objects = (
    {
        type = "cylinder";
        position = { x = -3; y = -5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -4.5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -4; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -3.5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -3; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -2.5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -2; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -1.5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -1; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = -0.5; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "cylinder";
        position = { x = -3; y = 0; z = 5; }; color = { r = 59; g = 39; b = 12; }; radius = 0.25; length = 5;
        direction = { x = 1; y = 0; z = 0; };
        transformations = (
            { type = "rotate"; around = "origin", axis = "z"; angle = 90 },
        );
    },
    {
        type = "sphere";
        position = { x = 0; y = -0.75; z = 3.5; }; color = { r = 240; g = 160; b = 160; }; radius = 0.75;
        transparency = true; refraction-index = 1.5; roughness = 0.4;
    },
    {
        type = "sphere";
        position = { x = 2.25; y = -0.75; z = 3.5; }; color = { r = 190; g = 200; b = 170; }; radius = 0.75;
        transparency = true; refraction-index = 1.5; roughness = 0.7;
    },
    // light
    {
        type = "square";
        color = { r = 255; g = 255; b = 255; }; emission-color = { r = 255; g = 255; b = 255; }; emission-intensity = 5;
        position = { x = -1; y = -4.99; z = 3; };
        p2 = { x = -1; y = -4.99; z = 4; };
        p3 = { x = 1; y = -4.99; z = 4; };
        p4 = { x = 1; y = -4.99; z = 3; };
    },
    // ceiling
    {
        type = "square";
        color = { r = 190; g = 190; b = 190; };
        position = { x = -3; y = -5; z = -2.5; };
        p2 = { x = -3; y = -5; z = 5; };
        p3 = { x = 3; y = -5; z = 5; };
        p4 = { x = 3; y = -5; z = -2.5; };
    },
    // floor
    {
        type = "square";
        color = { r = 190; g = 190; b = 190; }; reflection = true; roughness = 0.1;
        position = { x = -3; y = 0; z = -2.5; };
        p2 = { x = -3; y = 0; z = 5; };
        p3 = { x = 3; y = 0; z = 5; };
        p4 = { x = 3; y = 0; z = -2.5; };
    },
    // back
    // {
    //     type = "square";
    //     color = { r = 190; g = 190; b = 190; }; reflection = true; roughness = 0.8;
    //     position = { x = -3; y = 0; z = 5; };
    //     p2 = { x = -3; y = -5; z = 5; };
    //     p3 = { x = 3; y = -5; z = 5; };
    //     p4 = { x = 3; y = 0; z = 5; };
    // },
    // front
    // {
    //     type = "square";
    //     color = { r = 255; g = 255; b = 255; };
    //     position = { x = -3; y = 0; z = -2.5; };
    //     p2 = { x = -3; y = -5; z = -2.5; };
    //     p3 = { x = 3; y = -5; z = -2.5; };
    //     p4 = { x = 3; y = 0; z = -2.5; };
    //     transparency = true; refraction-index = 1; roughness = 0.01;
    // },
    // left
    {
        type = "square";
        color = { r = 200; g = 64; b = 64; }; reflection = true; roughness = 0.01;
        position = { x = -3; y = 0; z = 5; };
        p2 = { x = -3; y = -5; z = 5; };
        p3 = { x = -3; y = -5; z = -2.5; };
        p4 = { x = -3; y = 0; z = -2.5; };
    },
    // right
    {
        type = "square";
        color = { r = 64; g = 200; b = 64; }; reflection = true; roughness = 0.01;
        position = { x = 3; y = 0; z = 5; };
        p2 = { x = 3; y = -5; z = 5; };
        p3 = { x = 3; y = -5; z = -2.5; };
        p4 = { x = 3; y = 0; z = -2.5; };
    }
);

# Lights
# Every light support:
#  - type               (mandatory)
#  - intensity          (defaults to 1)
#  - color              (defaults to white)
#  - position           (only for point, defaults to {x = 0; y = 0; z = 0;})
#  - direction          (only for directional, defaults to {x = 0; y = 0; z = 0;})
#
# Supported types:
#  - point
#  - directional
#  - background         (color used when the camera doesn't hit anything, if multiple, multiplied together)
#  - ambient            (color used like a filter on the whole scene, if multiple, multiplied together)

lights = (
    {
        type = "directional";
        color = { r = 150; g = 150; b = 150; }; intensity = 1;
        direction = { x = 0; y = 10; z = 1; };
    },
    {
        type = "background";
        color = { r = 213; g = 231; b = 231};
    },
    {
        type = "ambient";
        color = { r = 255; g = 255; b = 255};
    },
);
